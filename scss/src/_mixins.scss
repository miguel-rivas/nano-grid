@use "sass:math";
$max-size: math.div(300, 5);

@mixin nn-responsive-grid($tag, $size) {
  &.#{$nano}break-#{$tag} {
    @media only screen and (max-width: $size) {
      display: block;
      margin-inline: 0 !important;
      #{nn-wc("column", ">")} {
        display: block;
        width: 100% !important;
        max-width: 100% !important;
        padding-inline: 0 !important;
      }
    }
  }
}

@mixin nn-set-spacing($space) {
  &.#{$nano}sp#{$space * 100} {
    margin-inline: -#{$space}rem;

    #{nn-wc("column", ">")} {
      padding-inline: #{$space}rem;
    }
  }
}

%nn-spacing {
  @include nn-set-spacing(0.25);
  @include nn-set-spacing(0.5);
  @include nn-set-spacing(0.75);
  @include nn-set-spacing(1);
  @include nn-set-spacing(1.25);
  @include nn-set-spacing(1.5);
  @include nn-set-spacing(1.75);
  @include nn-set-spacing(2);
  @include nn-set-spacing(2.25);
  @include nn-set-spacing(2.5);
  @include nn-set-spacing(2.75);
  @include nn-set-spacing(3);
  @include nn-set-spacing(3.25);
  @include nn-set-spacing(3.5);
  @include nn-set-spacing(3.75);
  @include nn-set-spacing(4);
}

@mixin nn-width-abs() {
  &.#{$nano}w-m0,
  &.#{$nano}w-p0 {
    flex-basis: 0;
    max-width: 0;
  }

  @for $counter from 1 through $max-size {
    $class-w: "#{$nano}w-p#{$counter * 5}";
    $size: "#{$counter * 5}px";
    $debug: debug("#{$class-w} :: #{$size}");

    &.#{$class-w} {
      flex-basis: unquote($size);
      max-width: unquote($size);
    }
  }
}

@mixin nn-width-percents() {
  @each $value in $css-width {
    $class: "#{$nano}w-#{nn-fraction-2-class($value)}";
    $size: "#{math.div(nth($value, 1),nth($value, 2)) * 100}%";

    &.#{$class} {
      flex-basis: unquote($size);
      max-width: unquote($size);
    }
  }
}

@mixin nn-width-percents-calc() {
  @for $subtraction from 1 through $max-size {
    @each $value in $css-width {
      $class: "#{$nano}w-#{nn-fraction-2-class($value)}-m#{$subtraction * 5}";
      $size: "calc(#{math.div(nth($value, 1),nth($value, 2)) * 100}% - #{$subtraction * 5}px)";

      &.#{$class} {
        flex-basis: unquote($size);
        max-width: unquote($size);
      }
    }
  }
}

@mixin nn-outline() {
  outline-color: var(--nn-border-outline);
  outline-width: 1px;
  outline-style: solid;
  outline-offset: -1px;
}

@mixin nn-org-layers($layers) {
  $index: 10;
  @each $layer in $layers {
      $index: $index + 1;
      #{$layer} {
          z-index: $index;
      }
  }
}

@mixin nn-create-icons($list) {
  @each $name, $value in $list {
      &.#{$nano}icon-#{$name}:before {
          content: $value;
      }
  }
}